import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class KlinikApp {
    private JFrame frame;
    private JTable table;
    private DefaultTableModel tableModel;
    private int currentRow = -1;

    private JTextField txtNama;
    private JTextField txtAlamat;
    private JTextField txtNIK;
    private JTextField txtTglLahir;

    private ArrayList<Pasien> pasienList = new ArrayList<>();

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    KlinikApp window = new KlinikApp();
                    window.frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public KlinikApp() {
        initialize();
    }

    private void initialize() {
        frame = new JFrame("Aplikasi Klinik");
        frame.setBounds(100, 100, 800, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        JLabel lblNama = new JLabel("Nama:");
        lblNama.setBounds(30, 20, 70, 20);
        frame.getContentPane().add(lblNama);

        txtNama = new JTextField();
        txtNama.setBounds(120, 20, 150, 20);
        frame.getContentPane().add(txtNama);

        JLabel lblAlamat = new JLabel("Alamat:");
        lblAlamat.setBounds(30, 50, 70, 20);
        frame.getContentPane().add(lblAlamat);

        txtAlamat = new JTextField();
        txtAlamat.setBounds(120, 50, 200, 20);
        frame.getContentPane().add(txtAlamat);

        JLabel lblNIK = new JLabel("NIK:");
        lblNIK.setBounds(30, 80, 70, 20);
        frame.getContentPane().add(lblNIK);

        txtNIK = new JTextField();
        txtNIK.setBounds(120, 80, 150, 20);
        frame.getContentPane().add(txtNIK);

        JLabel lblTglLahir = new JLabel("Tgl Lahir (YYYY-MM-DD):");
        lblTglLahir.setBounds(30, 110, 180, 20);
        frame.getContentPane().add(lblTglLahir);

        txtTglLahir = new JTextField();
        txtTglLahir.setBounds(220, 110, 100, 20);
        frame.getContentPane().add(txtTglLahir);

        JButton btnTambah = new JButton("Tambah");
        btnTambah.setBounds(30, 150, 90, 30);
        frame.getContentPane().add(btnTambah);

        JButton btnUpdate = new JButton("Update");
        btnUpdate.setBounds(130, 150, 90, 30);
        frame.getContentPane().add(btnUpdate);

        JButton btnHapus = new JButton("Hapus");
        btnHapus.setBounds(230, 150, 90, 30);
        frame.getContentPane().add(btnHapus);

        JButton btnPrev = new JButton("Prev");
        btnPrev.setBounds(30, 200, 90, 30);
        frame.getContentPane().add(btnPrev);

        JButton btnNext = new JButton("Next");
        btnNext.setBounds(130, 200, 90, 30);
        frame.getContentPane().add(btnNext);

        JButton btnDaftar = new JButton("Daftar Pasien");
        btnDaftar.setBounds(230, 200, 120, 30);
        frame.getContentPane().add(btnDaftar);

        tableModel = new DefaultTableModel(
                new Object[]{"No", "Nama Pasien", "NIK", "Tanggal Lahir", "Alamat"},
                0
        );

        table = new JTable(tableModel);
        table.setBounds(380, 20, 380, 380);
        frame.getContentPane().add(table);

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(380, 20, 380, 380);
        frame.getContentPane().add(scrollPane);

        // Initialize action listeners
        btnTambah.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tambahDataPasien();
            }
        });

        btnUpdate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateDataPasien();
            }
        });

        btnHapus.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                hapusDataPasien();
            }
        });

        btnPrev.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                navigasiSebelumnya();
            }
        });

        btnNext.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                navigasiSelanjutnya();
            }
        });

        btnDaftar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tampilkanDaftarPasien();
            }
        });
    }

    private void tambahDataPasien() {
        String nama = txtNama.getText();
        String alamat = txtAlamat.getText();
        String nikStr = txtNIK.getText();
        String tglLahirStr = txtTglLahir.getText();

        if (nama.isEmpty() || alamat.isEmpty() || nikStr.isEmpty() || tglLahirStr.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Harap isi semua kolom data.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi NIK harus angka
        long nik;
        try {
            nik = Long.parseLong(nikStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "NIK harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi tanggal lahir dalam format yang benar
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date tglLahir;
        try {
            tglLahir = dateFormat.parse(tglLahirStr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Format tanggal salah. Gunakan format YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Cek NIK harus unik
        for (Pasien pasien : pasienList) {
            if (pasien.getNIK() == nik) {
                JOptionPane.showMessageDialog(frame, "NIK sudah ada dalam database.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Tambahkan data pasien ke list
        Pasien newPasien = new Pasien(nama, alamat, nik, tglLahir);
        pasienList.add(newPasien);
        refreshTable();
        clearFields();
        JOptionPane.showMessageDialog(frame, "Data pasien berhasil ditambahkan.");
    }

    private void updateDataPasien() {
        if (currentRow == -1) {
            JOptionPane.showMessageDialog(frame, "Pilih data pasien yang akan diupdate.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String nama = txtNama.getText();
        String alamat = txtAlamat.getText();
        String nikStr = txtNIK.getText();
        String tglLahirStr = txtTglLahir.getText();

        if (nama.isEmpty() || alamat.isEmpty() || nikStr.isEmpty() || tglLahirStr.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Harap isi semua kolom data.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi NIK harus angka
        long nik;
        try {
            nik = Long.parseLong(nikStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "NIK harus berupa angka.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi tanggal lahir dalam format yang benar
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date tglLahir;
        try {
            tglLahir = dateFormat.parse(tglLahirStr);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Format tanggal salah. Gunakan format YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Cek NIK harus unik (kecuali untuk pasien yang sedang diupdate)
        for (Pasien pasien : pasienList) {
            if (pasien.getNIK() == nik && pasien.getNIK() != pasienList.get(currentRow).getNIK()) {
                JOptionPane.showMessageDialog(frame, "NIK sudah ada dalam database.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Update data pasien
        Pasien updatedPasien = new Pasien(nama, alamat, nik, tglLahir);
        pasienList.set(currentRow, updatedPasien);
        refreshTable();
        clearFields();
        JOptionPane.showMessageDialog(frame, "Data pasien berhasil diupdate.");
    }

    private void hapusDataPasien() {
        if (currentRow == -1) {
            JOptionPane.showMessageDialog(frame, "Pilih data pasien yang akan dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int result = JOptionPane.showConfirmDialog(frame, "Apakah Anda yakin ingin menghapus data pasien ini?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            pasienList.remove(currentRow);
            refreshTable();
            clearFields();
            JOptionPane.showMessageDialog(frame, "Data pasien berhasil dihapus.");
        }
    }

    private void navigasiSebelumnya() {
        if (currentRow > 0) {
            currentRow--;
            displayDataPasien(pasienList.get(currentRow));
        }
    }

    private void navigasiSelanjutnya() {
        if (currentRow < pasienList.size() - 1) {
            currentRow++;
            displayDataPasien(pasienList.get(currentRow));
        }
    }

    private void tampilkanDaftarPasien() {
        if (pasienList.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Tidak ada data pasien yang ditampilkan.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        JFrame daftarFrame = new JFrame("Daftar Pasien");
        daftarFrame.setBounds(100, 100, 600, 400);
        daftarFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JTable daftarTable = new JTable(new DefaultTableModel(
                new Object[]{"No", "Nama Pasien", "NIK", "Tanggal Lahir", "Alamat"},
                0
        ));

        for (int i = 0; i < pasienList.size(); i++) {
            Pasien pasien = pasienList.get(i);
            ((DefaultTableModel) daftarTable.getModel()).addRow(new Object[]{
                    i + 1,
                    pasien.getNama(),
                    pasien.getNIK(),
                    new SimpleDateFormat("yyyy-MM-dd").format(pasien.getTglLahir()),
                    pasien.getAlamat()
            });
        }

        JScrollPane daftarScrollPane = new JScrollPane(daftarTable);
        daftarFrame.getContentPane().add(daftarScrollPane);
        daftarFrame.setVisible(true);
    }

    private void displayDataPasien(Pasien pasien) {
        txtNama.setText(pasien.getNama());
        txtAlamat.setText(pasien.getAlamat());
        txtNIK.setText(Long.toString(pasien.getNIK()));
        txtTglLahir.setText(new SimpleDateFormat("yyyy-MM-dd").format(pasien.getTglLahir()));
    }

    private void refreshTable() {
        tableModel.setRowCount(0);

        for (int i = 0; i < pasienList.size(); i++) {
            Pasien pasien = pasienList.get(i);
            tableModel.addRow(new Object[]{
                    i + 1,
                    pasien.getNama(),
                    pasien.getNIK(),
                    new SimpleDateFormat("yyyy-MM-dd").format(pasien.getTglLahir()),
                    pasien.getAlamat()
            });
        }
    }

    private void clearFields() {
        txtNama.setText("");
        txtAlamat.setText("");
        txtNIK.setText("");
        txtTglLahir.setText("");
        currentRow = -1;
    }
}

class Pasien {
    private String nama;
    private String alamat;
    private long nik;
    private Date tglLahir;

    public Pasien(String nama, String alamat, long nik, Date tglLahir) {
        this.nama = nama;
        this.alamat = alamat;
        this.nik = nik;
        this.tglLahir = tglLahir;
    }

    public String getNama() {
        return nama;
    }

    public String getAlamat() {
        return alamat;
    }

    public long getNIK() {
        return nik;
    }

    public Date getTglLahir() {
        return tglLahir;
    }
}
